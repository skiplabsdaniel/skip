module SKMD;

fun readTextFile(filename: String): String {
  buf = mutable Vector[];
  IO.File::open(filename, IO.OpenOptions{read => true}).read_to_end(buf) match {
  | Success _ -> String::fromUtf8(buf.collect(Array))
  | Failure(err) ->
    print_error(err.getMessage());
    skipExit(1)
  }
}

class HTMLConfig{
  title: ?String = None(),
  description: ?String = None(),
  icon: ?String = None(),
  styles: Vector<String> = Vector[],
  scripts: Vector<String> = Vector[],
  customs: Vector<String> = Vector[],
  header: ?String = None(),
  footer: ?String = None(),
  lang: ?String = None(),
  charset: ?String = None(),
  tableOfContent: Int = -1,
} {
  //
  static fun fromJSON(jsv: JSON.Value): HTMLConfig {
    jso = jsv.expectObject();
    getVector = name ->
      jso
        .maybeGetArray(name)
        .map(a -> a.value.map(v -> v.expectString()))
        .default(Vector[]);
    static{
      title => jso.maybeGetString("title"),
      description => jso.maybeGetString("description"),
      icon => jso.maybeGetString("icon"),
      styles => getVector("styles"),
      scripts => getVector("scripts"),
      customs => getVector("customs").map(readTextFile),
      header => jso.maybeGetString("header").map(readTextFile),
      footer => jso.maybeGetString("footer").map(readTextFile),
      lang => jso.maybeGetString("lang"),
      charset => jso.maybeGetString("charset"),
      tableOfContent => jso.maybeGetInt("tableOfContent").default(-1),
    }
  }

  fun fill(elements: mutable Vector<HTMLEntity>): void {
    elements.push(
      HTMLSimple(
        "meta",
        Map["charset" => JSON.String(this.charset.default("UTF-8"))],
      ),
    );
    this.title.each(t -> elements.push(HTMLTextContainer("title", t)));
    this.description.each(d ->
      elements.push(
        HTMLSimple(
          "meta",
          Map[
            "name" => JSON.String("description"),
            "content" => JSON.String(d),
          ],
        ),
      )
    );
    this.icon.each(i ->
      elements.push(
        HTMLSimple(
          "link",
          Map[
            "rel" => JSON.String("shortcut icon"),
            "type" => JSON.String("image/svg"),
            "href" => JSON.String(i),
          ],
        ),
      )
    );
    this.styles.each(s ->
      elements.push(
        HTMLSimple(
          "link",
          Map["rel" => JSON.String("stylesheet"), "href" => JSON.String(s)],
        ),
      )
    );
    this.scripts.each(s ->
      elements.push(
        HTMLElement("script", Map["src" => JSON.String(s)], Vector[]),
      )
    );
    this.customs.each(h -> elements.push(HTMLInclude(h)));
  }
}

// TODO: manage special chars &xxx;
fun convertToHtml{
  markdown: String,
  buffer: mutable Vector<String>,
  conf: HTMLConfig,
}: void {
  entities = parseToBlocks(markdown);
  body_content = convert(entities);
  elements = mutable Vector<HTMLEntity>[];
  conf.fill(elements);
  sublinks = toHtmlMenu(toMenu(entities), conf.tableOfContent, 0);
  tableOfContent = if (!sublinks.isEmpty()) {
    Vector[
      HTMLElement(
        "ul",
        Map[
          "class" => JSON.String("tableOfContent"),
          "md-depth" => JSON.String("0"),
        ],
        sublinks,
      ),
    ]
  } else {
    Vector[]
  };
  body_elements = Vector[
    HTMLElement(
      "div",
      Map["class" => JSON.String("header")],
      conf.header.map(h -> Vector[HTMLInclude(h)]).default(Vector[]),
    ),
  ].concat(tableOfContent).concat(
    Vector[
      HTMLElement("div", Map["class" => JSON.String("body")], body_content),
      HTMLElement(
        "div",
        Map["class" => JSON.String("footer")],
        conf.footer.map(h -> Vector[HTMLInclude(h)]).default(Vector[]),
      ),
    ],
  );
  html = HTMLElement(
    "html",
    Map["lang" => JSON.String(conf.lang.default("en"))],
    Vector[
      HTMLElement("head", Map[], elements.chill()),
      HTMLElement("body", Map[], body_elements),
    ],
  );
  html.print(buffer, "");
}

fun convert(entities: Vector<Entity>): Vector<HTMLElement> {
  elements = mutable Vector<HTMLElement>[];
  idx = 0;
  while (idx < entities.size()) {
    entities[idx] match {
    | ParagraphBlock(lines, header) ->
      children_ = lines.map(l ->
        if (l.maybeGet(0) == Some('<')) {
          HTMLHtml(l.toString());
        } else {
          HTMLText(splitAccessor(l));
        }
      );
      if (header > 6) {
        elements.push(
          HTMLElement(
            "div",
            Map[
              "md-kind" => JSON.String("h"),
              "md-level" => JSON.String(header.toString()),
            ],
            children_,
          ),
        )
      } else if (header > 0) {
        elements.push(HTMLElement(`h${header}`, Map[], children_))
      } else {
        elements.push(HTMLElement("p", Map[], children_))
      }
    | CodeBlock(count, language, lines) ->
      strl = language.toString().trim();
      children_ = lines.map(l -> HTMLCode(splitAccessor(l)));
      attrs = if (strl.isEmpty()) {
        Map["md-level" => JSON.String(count.toString())]
      } else {
        Map[
          "class" => JSON.String(`language-${strl}`),
          "md-level" => JSON.String(count.toString()),
        ]
      };
      elements.push(
        HTMLElement(
          "pre",
          attrs,
          Vector<HTMLEntity>[HTMLElement("code", attrs, children_)],
        ),
      )
    | ConfigBlock(_lines) -> print_error("The config block has been ignored.")
    | hb @ HeaderBlock(level, subentities, _) ->
      attrs = hb.getId() match {
      | Some(id) ->
        Map[
          "md-kind" => JSON.String("chapter"),
          "md-level" => JSON.String(level.toString()),
          "id" => JSON.String(id),
        ]
      | _ ->
        Map[
          "md-kind" => JSON.String("chapter"),
          "md-level" => JSON.String(level.toString()),
        ]
      };
      elements.push(HTMLElement("div", attrs, convert(subentities)))
    | ListBlock(_, kind, subentities, _) ->
      htmlEntities = mutable Vector[];
      htmlEntities.push(
        HTMLElement(
          "li",
          Map["md-kind" => JSON.String(kind.toString())],
          convert(subentities),
        ),
      );
      !idx = idx + 1;
      while (
        idx < entities.size() &&
        entities[idx] match {
        | ListBlock(_, skind, _, _) if (skind == kind) -> true
        | _ -> false
        }
      ) {
        slist = (entities[idx] as ListBlock _);
        htmlEntities.push(
          HTMLElement(
            "li",
            Map["md-kind" => JSON.String(slist.kind.toString())],
            convert(slist.entities),
          ),
        );
        !idx = idx + 1;
      };
      tag = kind match {
      | BulletList _ -> "ul"
      | OrederedList _ -> "ol"
      };
      elements.push(HTMLElement(tag, Map[], htmlEntities.chill()));
      !idx = idx - 1
    | BlockQuote(subentities, _) ->
      elements.push(
        HTMLElement(
          "div",
          Map["md-kind" => JSON.String("blockquote")],
          convert(subentities),
        ),
      )
    | DivBlock(className, subentities, _) ->
      elements.push(
        HTMLElement(
          "div",
          Map["class" => JSON.String(className.toString())],
          convert(subentities),
        ),
      )
    | Table(size, head, body, foot, _, _) ->
      elements.push(
        HTMLElement(
          "table",
          Map["md-kind" => JSON.String("multiple")],
          convertTable(size, head, body, foot),
        ),
      )
    | SimpleTable(_, size, head, body) ->
      elements.push(
        HTMLElement(
          "table",
          Map["md-kind" => JSON.String("simple")],
          convertSimpleTable(size, head, body),
        ),
      )
    };
    !idx = idx + 1;
  };
  elements.chill()
}

fun convertTable(
  size: Int,
  head: Vector<Vector<CellBlock>>,
  body: Vector<Vector<CellBlock>>,
  foot: Vector<Vector<CellBlock>>,
): Vector<HTMLElement> {
  elements = mutable Vector<HTMLElement>[];
  if (!head.isEmpty()) {
    elements.push(HTMLElement("thead", Map[], convertRows(size, head, true)))
  };
  elements.push(HTMLElement("tbody", Map[], convertRows(size, body)));
  if (!foot.isEmpty()) {
    elements.push(HTMLElement("tfoot", Map[], convertRows(size, foot)))
  };
  elements.chill()
}

fun convertRows(
  size: Int,
  rows: Vector<Vector<CellBlock>>,
  head: Bool = false,
): Vector<HTMLElement> {
  rows.map(row -> HTMLElement("tr", Map[], convertRow(size, row, head)))
}

fun convertRow(
  size: Int,
  row: Vector<CellBlock>,
  head: Bool,
): Vector<HTMLElement> {
  elements = mutable Vector<HTMLElement>[];
  for (i in Range(0, size)) {
    row.maybeGet(i) match {
    | Some(cell) ->
      elements.push(
        HTMLElement(if (head) "th" else "td", Map[], convert(cell.entities)),
      )
    | _ ->
      elements.push(
        HTMLElement(
          if (head) "th" else "td",
          Map[],
          Vector[HTMLHtml("&nbsp;")],
        ),
      )
    }
  };
  elements.chill()
}

fun convertSimpleTable(
  size: Int,
  head: Vector<Accessor>,
  body: Vector<Vector<Accessor>>,
): Vector<HTMLElement> {
  elements = mutable Vector<HTMLElement>[];
  elements.push(
    HTMLElement("thead", Map[], convertSimpleRow(size, head, true)),
  );
  elements.push(HTMLElement("tbody", Map[], convertSimpleRows(size, body)));
  elements.chill()
}

fun convertSimpleRows(
  size: Int,
  rows: Vector<Vector<Accessor>>,
  head: Bool = false,
): Vector<HTMLElement> {
  rows.map(row -> HTMLElement("tr", Map[], convertSimpleRow(size, row, head)))
}

fun convertSimpleRow(
  size: Int,
  row: Vector<Accessor>,
  head: Bool,
): Vector<HTMLElement> {
  elements = mutable Vector<HTMLElement>[];
  for (i in Range(0, size)) {
    row.maybeGet(i) match {
    | Some(cell) ->
      elements.push(
        HTMLElement(
          if (head) "th" else "td",
          Map[],
          Vector[HTMLText(splitAccessor(cell))],
        ),
      )
    | _ ->
      elements.push(
        HTMLElement(
          if (head) "th" else "td",
          Map[],
          Vector[HTMLHtml("&nbsp;")],
        ),
      )
    }
  };
  elements.chill()
}

mutable base class HTMLEntity uses Show {
  readonly fun print(buffer: mutable Vector<String>, prefix: String): void;

  readonly fun toString(): String {
    buffer = mutable Vector<String>[];
    this.print(buffer, "");
    buffer.join("\n");
  }
}

class HTMLSimple(
  tag: String,
  attributes: Map<String, JSON.String>,
) extends HTMLEntity {
  fun print(buffer: mutable Vector<String>, prefix: String): void {
    if (!this.attributes.isEmpty()) {
      buf = Array::mfill(this.attributes.size(), "");
      idx = 0;
      this.attributes.unsafeEach(entry -> {
        buf.set(idx, `${entry.unsafeKey()}=${entry.unsafeValue()}`);
        !idx = idx + 1
      });
      buffer.push(`${prefix}<${this.tag} ${buf.join(" ")}/>`)
    } else {
      buffer.push(`${prefix}<${this.tag}/>`);
    };
  }
}

class HTMLTextContainer(tag: String, text: String) extends HTMLEntity {
  fun print(buffer: mutable Vector<String>, prefix: String): void {
    buffer.push(`${prefix}<${this.tag}>${this.text}</${this.tag}>`);
  }
}

class HTMLInclude(html: String) extends HTMLEntity {
  fun print(buffer: mutable Vector<String>, prefix: String): void {
    buffer.push(this.html.split("\n").map(v -> prefix + v).join("\n"))
  }
}

class HTMLHtml(text: String) extends HTMLEntity {
  fun print(buffer: mutable Vector<String>, prefix: String): void {
    buffer.push(`${prefix}${this.text}`)
  }
}

class HTMLText(text: Array<TextElement>) extends HTMLEntity {
  fun print(buffer: mutable Vector<String>, prefix: String): void {
    buffer.push(`${prefix}${toText(this.text)}`)
  }
}

class HTMLCode(
  text: Array<TextElement>,
  prefix: String = "",
) extends HTMLEntity {
  fun print(buffer: mutable Vector<String>, _prefix: String): void {
    buffer.push(`${this.prefix}${toText(this.text)}`)
  }
}

mutable class HTMLElement(
  tag: String,
  attributes: mutable Map<String, JSON.String>,
  children_: mutable Vector<HTMLEntity>,
) extends HTMLEntity {
  //
  readonly fun print(buffer: mutable Vector<String>, prefix: String): void {
    if (this.tag == "#text") {
      this.attributes.maybeGet("#content").each(str ->
        str.value.split("\n").map(s -> `${prefix}${s.trim()}`).each(buffer.push)
      )
    } else {
      if (this.tag == "html") {
        buffer.push("<!doctype html>")
      };
      if (!this.attributes.isEmpty()) {
        buf = Array::mfill(this.attributes.size(), "");
        idx = 0;
        this.attributes.unsafeEach(entry -> {
          buf.set(idx, `${entry.unsafeKey()}=${entry.unsafeValue()}`);
          !idx = idx + 1
        });
        buffer.push(`${prefix}<${this.tag} ${buf.join(" ")}>`)
      } else {
        buffer.push(`${prefix}<${this.tag}>`);
      };
      subprefix = if (this.tag != "pre") prefix + "  " else "";
      this.children_.each(c -> c.print(buffer, subprefix));
      buffer.push(`${if (this.tag != "pre") prefix else ""}</${this.tag}>`);
    }
  }

  readonly fun chill(): this {
    HTMLElement(this.tag, this.attributes.chill(), this.children_.chill())
  }
}

fun toText(elements: Array<TextElement>): String {
  elements.map(textElementToHtml).join("");
}

fun textElementToHtml(elem: TextElement): String {
  elem match {
  | TELink(ltext, link, optTitle) ->
    url = Url::parse(Accessor::fromVector(link.chars()));
    text = toEncoded(ltext.chars());
    optTitle match {
    | Some(title) ->
      if (url.isAbsolute()) {
        `<a href="${url.escaped()}" title="${title}" target="_blank">${text}</a>`
      } else {
        `<a href="${url.escaped()}" title="${title}">${text}</a>`
      }
    | _ ->
      if (url.isAbsolute()) {
        `<a href="${url.escaped()}" target="_blank">${text}</a>`
      } else {
        `<a href="${url.escaped()}">${text}</a>`
      }
    }
  | TEImage(lalt, src, optTitle) ->
    url = Url::parse(Accessor::fromVector(src.chars()));
    alt = toEncoded(lalt.chars());
    if (alt.isEmpty()) {
      optTitle match {
      | Some(title) -> `<img src="${url.escaped()}" title="${title}"></img>`
      | _ -> `<img src="${url.escaped()}"></img>`
      }
    } else {
      optTitle match {
      | Some(title) ->
        `<img src="${url.escaped()}" title="${title}" alt="${alt}"></img>`
      | _ -> `<img src="${url.escaped()}" alt="${alt}"></img>`
      }
    }
  | TEAnchor(atext, aanchor) ->
    chars = aanchor.chars();
    hashtag = 0;
    while (chars.maybeGet(hashtag) == Some('#')) {
      !hashtag = hashtag + 1;
    };
    if (hashtag > 0) {
      !chars = chars.drop(hashtag);
    };
    text = toEncoded(atext.chars());
    anchor = toEncoded(chars);
    `<a href="${anchor}">${text}</a>`
  | TEBold(text) -> `<strong>${text}</strong>`
  | TEEmphasis(text) -> `<em>${text}</em>`
  | TECode(text) -> `<code>${text}</code>`
  | TEText(text) -> `${text}`
  }
}

fun toHtmlMenu(menus: Array<Menu>, max: Int, depth: Int): Vector<HTMLEntity> {
  if (max == depth) {
    return Vector[];
  };
  items = mutable Vector<HTMLEntity>[];
  menus.each(menu -> {
    title = menu.title.map(l -> HTMLText(splitAccessor(l)));
    sublinks = toHtmlMenu(menu.items, max, depth + 1);
    children_ = if (!sublinks.isEmpty()) {
      Vector[
        HTMLElement(
          "ul",
          Map[
            "class" => JSON.String("tableOfContent"),
            "md-depth" => JSON.String(depth.toString()),
          ],
          sublinks,
        ),
      ]
    } else {
      Vector[]
    };
    items.push(
      HTMLElement(
        "li",
        Map[],
        Vector[
          HTMLElement("a", Map["href" => JSON.String(`#${menu.id}`)], title),
        ].concat(children_),
      ),
    )
  });
  items.chill();
}

module end;
