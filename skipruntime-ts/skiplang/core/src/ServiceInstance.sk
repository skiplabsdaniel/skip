module alias SR = SkipRuntime;

module ServiceInstance;

base class Notifier {
  fun notify(values: String, watermark: String, updates: Bool): void;
  fun close(): void;
}

class NotifierPrinter(
  notifier: Notifier,
  printer: Array<SR.Entry> ~> String,
) extends SR.Notifier {
  fun subscribed(): void {
    void
  }

  fun notify(values: Array<SR.Entry>, watermark: String, updates: Bool): void {
    this.notifier.notify(this.printer(values), watermark, updates)
  }

  fun close(): void {
    this.notifier.close()
  }
}

fun instantiateResource(
  identifier: String,
  resource: String,
  params: String,
  executor: SR.Executor,
): Result<void, .Exception> {
  SKStore.runWithResult(context ~> {
    builder = SR.getResourceBuilder(context, resource);
    parameters = builder.parseParameters(params);
    _ = SR.createReactiveResource(
      context,
      identifier,
      resource,
      parameters,
      executor,
    )
  })
}

fun closeResourceInstance(identifier: String): Result<void, .Exception> {
  SKStore.runWithResult(context ~> {
    SR.closeReactiveResource(context, identifier)
  })
}

fun resourceSnapshot(
  resource: String,
  params: String,
): Result<String, .Exception> {
  SKStore.runWithResult(context ~> {
    builder = SR.getResourceBuilder(context, resource);
    parameters = builder.parseParameters(params);
    builder
      .snapshot()
      .snapshot(SR.resourceSnapshot(context, resource, parameters))
  })
}

fun resourceSnapshotLookup(
  resource: String,
  params: String,
  key: String,
): Result<String, .Exception> {
  SKStore.runWithResult(context ~> {
    builder = SR.getResourceBuilder(context, resource);
    parameters = builder.parseParameters(params);
    builder
      .snapshot()
      .snapshotLookup(
        SR.resourceSnapshotLookup(context, resource, parameters, key),
      )
  })
}

fun subscribe(
  identifier: String,
  notifier: Notifier,
  watermark: ?String,
  optSession: ?Int = None(),
): Result<Int, .Exception> {
  SKStore.runWithResult(context ~> {
    builder = SR.getResourceBuilderForInstance(context, identifier);
    SR.subscribe(
      context,
      identifier,
      NotifierPrinter(notifier, builder.snapshot().snapshot),
      watermark,
      optSession,
    )
  })
}

fun unsubscribe(identifier: Int): Result<void, .Exception> {
  SKStore.runWithResult(context ~> {
    SR.unsubscribe(context, identifier)
  })
}

fun update(
  input: String,
  values: String,
  executor: SR.Executor,
): Result<void, .Exception> {
  SKStore.runWithResult(context ~> {
    (collection, data) = SR.getInputData(context, input);
    entries = data.parse(values);
    SR.update(context, input, entries.map(collection.getToSKStore()), executor)
  })
}

fun init(service: SR.Service, executor: SR.Executor): Result<void, .Exception> {
  SR.initService(service, executor)
}

module end;
