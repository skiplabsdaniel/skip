module IO;

trait Serializable extends HasClassName {
  fun serialize(mutable Serializer): void;

  macro static fun className(): String {
    #thisClassName
  }

  static fun deserialize(mutable Deserializer): this;
}

@debug
@cpp_extern("SKIP_unsafe_cast")
native fun unsafeConcreteCast<T: Serializable, F: Serializable>(
  t: Concrete<T>,
): Concrete<F>;

fun deserialize<T: Serializable>(
  cv: Concrete<T>,
  deserializer: mutable Deserializer,
): T {
  cv::deserialize(deserializer)
}

fun nameForConcrete<T: Serializable>(cv: Concrete<T>): String {
  cv::className()
}

mutable base class Serializer {
  //
  mutable fun putNone(): void;

  mutable fun putFloat(Float): void;

  mutable fun putInt(Int): void;

  mutable fun putBool(Bool): void;

  mutable fun putChar(Char): void;

  mutable fun putString(String): void;

  mutable fun startArray(Int): void;

  mutable fun push<T: Serializable>(T): void;

  mutable fun endArray(): void;

  mutable fun startObject(String, Array<?String> = Array[]): void;

  mutable fun putField<V: Serializable>(String, V): void;
  mutable fun putIterableField<V: Serializable>(String, Iterable<V>): void;

  mutable fun endObject(): void;

  mutable fun close(): void;

  overridable mutable fun putIterable<T: IO.Serializable>(
    iterable: Iterable<T>,
  ): void {
    this.startArray(iterable.size());
    iterable.each(value -> this.push(value));
    this.endArray()
  }

  overridable mutable fun putObject<V: IO.Serializable>(
    name: String,
    iterable: KeyedIterable<String, V>,
  ): void {
    this.startObject(name);
    iterable.each(this.putField);
    this.endObject()
  }

  overridable mutable fun putInt32(v: Int32): void {
    this.putInt(v.toInt())
  }

  overridable mutable fun putInt16(v: Int16): void {
    this.putInt(v.toInt())
  }

  overridable mutable fun putInt8(v: Int8): void {
    this.putInt(v.toInt())
  }

  overridable mutable fun putUInt32(v: UInt32): void {
    this.putInt(v.toInt())
  }

  overridable mutable fun putUInt16(v: UInt16): void {
    this.putInt(v.toInt())
  }

  overridable mutable fun putUInt8(v: UInt8): void {
    this.putInt(v.toInt())
  }
}

mutable base class Deserializer {
  //
  mutable fun nextFloat(): Float;

  mutable fun nextInt(): Int;

  mutable fun nextBool(): Bool;

  mutable fun nextChar(): Char;

  mutable fun nextString(): String;

  mutable fun nextToken(): String;

  mutable fun nextArraySize(): Int;

  mutable fun nextItem<T: Serializable>(Concrete<T>): T;

  overridable mutable fun nextIterable<T: Serializable>(
    t: Concrete<T>,
  ): Iterable<T> {
    size = this.nextArraySize();
    values = mutable Vector[];
    while (size > 0) {
      values.push(this.nextItem(t))
    };
    values.toArray()
  }

  mutable fun nextKeyedIterable<V: Serializable>(
    Concrete<V>,
  ): KeyedIterable<String, V>;

  overridable mutable fun nextInt32(): Int32 {
    Int32::truncate(this.nextInt())
  }

  overridable mutable fun nextInt16(): Int16 {
    Int16::truncate(this.nextInt())
  }

  overridable mutable fun nextInt8(): Int8 {
    Int8::truncate(this.nextInt())
  }

  overridable mutable fun nextUInt32(): UInt32 {
    UInt32::truncate(this.nextInt())
  }

  overridable mutable fun nextUInt16(): UInt16 {
    UInt16::truncate(this.nextInt())
  }

  overridable mutable fun nextUInt8(): UInt8 {
    UInt8::truncate(this.nextInt())
  }
}

extension class .Int uses Serializable {
  fun serialize(serializer: mutable Serializer): void {
    serializer.putInt(this)
  }

  static fun deserialize(deserializer: mutable Deserializer): Int {
    deserializer.nextInt()
  }
}

extension class .Float uses Serializable {
  fun serialize(serializer: mutable Serializer): void {
    serializer.putFloat(this)
  }

  static fun deserialize(deserializer: mutable Deserializer): Float {
    deserializer.nextFloat()
  }
}

extension class .Bool uses Serializable {
  fun serialize(serializer: mutable Serializer): void {
    serializer.putBool(this)
  }

  static fun deserialize(deserializer: mutable Deserializer): Bool {
    deserializer.nextBool()
  }
}

extension class .String uses Serializable {
  fun serialize(serializer: mutable Serializer): void {
    serializer.putString(this)
  }

  static fun deserialize(deserializer: mutable Deserializer): String {
    deserializer.nextString()
  }
}

extension class .Char uses Serializable {
  fun serialize(serializer: mutable Serializer): void {
    serializer.putChar(this)
  }

  static fun deserialize(deserializer: mutable Deserializer): Char {
    deserializer.nextChar()
  }
}

extension class .Int32 uses Serializable {
  fun serialize(serializer: mutable Serializer): void {
    serializer.putInt32(this)
  }

  static fun deserialize(deserializer: mutable Deserializer): Int32 {
    deserializer.nextInt32()
  }
}

extension class .UInt32 uses Serializable {
  fun serialize(serializer: mutable Serializer): void {
    serializer.putUInt32(this)
  }

  static fun deserialize(deserializer: mutable Deserializer): UInt32 {
    deserializer.nextUInt32()
  }
}

extension class .Int16 uses Serializable {
  fun serialize(serializer: mutable Serializer): void {
    serializer.putInt16(this)
  }

  static fun deserialize(deserializer: mutable Deserializer): Int16 {
    deserializer.nextInt16()
  }
}

extension class .UInt16 uses Serializable {
  fun serialize(serializer: mutable Serializer): void {
    serializer.putUInt16(this)
  }

  static fun deserialize(deserializer: mutable Deserializer): UInt16 {
    deserializer.nextUInt16()
  }
}

extension class .Int8 uses Serializable {
  fun serialize(serializer: mutable Serializer): void {
    serializer.putInt8(this)
  }

  static fun deserialize(deserializer: mutable Deserializer): Int8 {
    deserializer.nextInt8()
  }
}

extension class .UInt8 uses Serializable {
  fun serialize(serializer: mutable Serializer): void {
    serializer.putUInt8(this)
  }

  static fun deserialize(deserializer: mutable Deserializer): UInt8 {
    deserializer.nextUInt8()
  }
}

module end;
