module alias SR = SkipRuntime;
module SumService;

const kSTRING_INT_TYPES: SR.ConverterPair<String, Int> = SR.ConverterPair(
  SR.StringKeyConverter(),
  SR.IntValueConverter(),
);

const kSTRING_INDEXED_TYPES: SR.ConverterPair<
  String,
  Indexed,
> = SR.ConverterPair(
  SR.StringKeyConverter(),
  SR.FileValueConverter(Indexed::type),
);

class Indexed(index: Int, value: Int) extends SKStore.File uses Orderable

class AddIndex(
  private index: Int,
) extends SR.Mapper<String, Int, String, Indexed> {
  fun mapEntry(
    key: String,
    values: mutable SKStore.NonEmptyIterator<Int>,
  ): mutable Iterator<(String, Indexed)> {
    Array[(key, Indexed(this.index, values.first))].iterator();
  }

  fun converters(): SR.ConverterPair<String, Indexed> {
    kSTRING_INDEXED_TYPES
  }
}

class Plus() extends SR.Mapper<String, Int, String, Int> {
  fun mapEntry(
    key: String,
    values: mutable SKStore.NonEmptyIterator<Int>,
  ): mutable Iterator<(String, Int)> {
    val = values.collect(Array).reduce((p, c) ~> p + c, 0);
    Array[(key, val)].iterator();
  }

  fun converters(): SR.ConverterPair<String, Int> {
    kSTRING_INT_TYPES
  }
}

class Minus() extends SR.Mapper<String, Indexed, String, Int> {
  fun mapEntry(
    key: String,
    values: mutable SKStore.NonEmptyIterator<Indexed>,
  ): mutable Iterator<(String, Int)> {
    acc = (p: ?Int, c: Indexed) ~> {
      p match {
      | Some(v) -> Some(v - c.value)
      | _ -> Some(c.value)
      }
    };
    res = values.collect(Array).sorted().reduce(acc, None()) match {
    | Some(val) -> Array[(key, val)]
    | _ -> Array[]
    };
    res.iterator();
  }

  fun converters(): SR.ConverterPair<String, Int> {
    kSTRING_INT_TYPES
  }
}

class Add() extends SR.Resource {
  fun instantiate(
    cs: Map<String, SR.Collection<SKStore.Key, SKStore.File>>,
  ): SR.Collection<SKStore.Key, SKStore.File> {
    cs
      .get("input1")
      .merge(Array[cs.get("input2")])
      .unsafeCast(kSTRING_INT_TYPES)
      .map(Plus())
      .unTyped();
  }
}

class Sub() extends SR.Resource {
  fun instantiate(
    cs: Map<String, SR.Collection<SKStore.Key, SKStore.File>>,
  ): SR.Collection<SKStore.Key, SKStore.File> {
    cs["input1"]
      .unsafeCast(kSTRING_INT_TYPES)
      .map(AddIndex(0))
      .merge(Array[cs["input2"].unsafeCast(kSTRING_INT_TYPES).map(AddIndex(1))])
      .map(Minus())
      .unTyped();
  }
}

class Service extends SR.Service {
  fun buildResource(name: String, _parameters: SR.Parameters): SR.Resource {
    name match {
    | "add" -> Add()
    | "sub" -> Sub()
    | _ -> invariant_violation("Unknown resource")
    }
  }

  fun getExternalService(_name: String): SR.ExternalService {
    invariant_violation("No external services supplied.")
  }

  fun eachExternalService(_fn: (String, SR.ExternalService) ~> void): void {
    void
  }

  fun createGraph(
    ics: Map<String, SR.Collection<SKStore.Key, SKStore.File>>,
  ): Map<String, SR.Collection<SKStore.Key, SKStore.File>> {
    ics
  }
}
/*
@export("Skip_SumService_init")
fun init() {

}
*/


module end;
