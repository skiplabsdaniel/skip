module SkipRuntime;

type JSONMapper = Mapper<JSONID, JSONFile, JSONID, JSONFile>;

const kCREATE_INTJSON: Int ~> JSONFile = v ~> JSONFile(SKJSON.CJInt(v));

value class Values(
  values: Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>,
  watermark: String,
)

fun jsonFromFile(value: SKStore.File): SKJSON.CJSON {
  JSONFile::type(value).json
}

fun jsonFromKey(key: SKStore.Key): SKJSON.CJSON {
  JSONID::keyType(key).json
}

fun jsonFromError(error: IError): SKJSON.CJSON {
  (error as JSONError _).error
}

@cpp_extern("SkipRuntime_getErrorHdl")
@debug
native fun getErrorHdl(exn: .Exception): Float;

/************  NonEmptyIterator ****************/

@export("SkipRuntime_NonEmptyIterator__next")
fun nextOfNonEmptyIterator(
  values: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
): ?SKJSON.CJSON {
  values.next()
}

/************  Mapper ****************/

@cpp_extern("SkipRuntime_Mapper__mapEntry")
@debug
native fun mapEntryOfMapper(
  mapper: UInt32,
  key: SKJSON.CJSON,
  values: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
): SKJSON.CJArray;

@cpp_extern("SkipRuntime_deleteMapper")
@debug
native fun deleteMapper(mapper: UInt32): void;

@export("SkipRuntime_createMapper")
fun createMapper(mapper: UInt32): ExternMapper {
  ExternMapper(SKStore.ExternalPointer::create(mapper, deleteMapper))
}

class ExternMapper(
  eptr: SKStore.ExternalPointer,
) extends Mapper<JSONID, JSONFile, JSONID, JSONFile> {
  fun mapEntry(
    key: JSONID,
    values: mutable SKStore.NonEmptyIterator<JSONFile>,
  ): mutable Iterator<(JSONID, JSONFile)> {
    mapEntryOfMapper(this.eptr.value, key.json, values.map(v -> v.json)) match {
    | SKJSON.CJArray(vals) ->
      vals
        .map(e ->
          e match {
          | SKJSON.CJArray(av) ->
            optKey = av.maybeGet(0);
            optVal = av.maybeGet(1);
            (optKey, optVal) match {
            | (Some(rkey), Some(rval)) -> (JSONID(rkey), JSONFile(rval))
            | _ -> invariant_violation("Invalid entry.")
            }
          | _ -> invariant_violation("Invalid entry.")
          }
        )
        .iterator()
    }
  }

  fun converters(): ConverterPair<JSONID, JSONFile> {
    kJSON_CONVERTERS
  }
}

/************  LazyCompute ****************/

@cpp_extern("SkipRuntime_LazyCompute__compute")
@debug
native fun computeOfLazyCompute(
  lazyCompute: UInt32,
  self: String,
  key: SKJSON.CJSON,
): SKJSON.CJSON;

@cpp_extern("SkipRuntime_deleteLazyCompute")
@debug
native fun deleteLazyCompute(lazyCompute: UInt32): void;

@export("SkipRuntime_createLazyCompute")
fun createLazyCompute(lazyCompute: UInt32): ExternLazyCompute {
  ExternLazyCompute(
    SKStore.ExternalPointer::create(lazyCompute, deleteLazyCompute),
  )
}

class ExternLazyCompute(
  eptr: SKStore.ExternalPointer,
) extends LazyCompute<JSONID, JSONFile> {
  fun compute(
    self: LazyCollection<JSONID, JSONFile>,
    key: JSONID,
  ): Array<JSONFile> {
    computeOfLazyCompute(this.eptr.value, self.getId(), key.json) match {
    | SKJSON.CJArray(value) -> value.map(v -> JSONFile(v))
    | _ -> invariant_violation("Invalid computed value.")
    }
  }
}

/************  ExternalService ****************/

@cpp_extern("SkipRuntime_ExternalService__subscribe")
@debug
native fun subscribeOfExternalService(
  externalSupplier: UInt32,
  collection: String,
  instance: String,
  resource: String,
  params: SKJSON.CJSON,
): void;

@cpp_extern("SkipRuntime_ExternalService__unsubscribe")
@debug
native fun unsubscribeOfExternalService(
  externalSupplier: UInt32,
  instance: String,
): void;

@cpp_extern("SkipRuntime_ExternalService__shutdown")
@debug
native fun shutdownOfExternalService(externalSupplier: UInt32): Float;

@cpp_extern("SkipRuntime_deleteExternalService")
@debug
native fun deleteExternalService(externalSupplier: UInt32): void;

@export("SkipRuntime_createExternalService")
fun createExternalService(externalSupplier: UInt32): ExternExternalService {
  ExternExternalService(
    SKStore.ExternalPointer::create(externalSupplier, deleteExternalService),
  )
}

class ExternExternalService(
  eptr: SKStore.ExternalPointer,
) extends ExternalService {
  fun subscribe(
    instance: String,
    collection: CollectionWriter,
    resource: String,
    params: Parameters,
  ): void {
    subscribeOfExternalService(
      this.eptr.value,
      collection.dirName.toString(),
      instance,
      resource,
      (params as JSONParams _).json,
    )
  }

  fun unsubscribe(instance: String): void {
    unsubscribeOfExternalService(this.eptr.value, instance)
  }

  fun shutdown(): Float {
    shutdownOfExternalService(this.eptr.value)
  }
}

/************  CollectionWriter ****************/

@export("SkipRuntime_CollectionWriter__update")
fun updateOfCollectionWriter(
  collection: String,
  values: SKJSON.CJArray,
  isInit: Int32,
): Float {
  writer = CollectionWriter(SKStore.DirName::create(collection));
  writer.update(
    values match {
    | SKJSON.CJArray(vs) ->
      vs.map(v -> {
        e = SKJSON.expectArray(v);
        (JSONID(e[0]), SKJSON.expectArray(e[1]).map(v -> JSONFile(v)))
      })
    },
    isInit != 0,
  ) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_CollectionWriter__loading")
fun loadingOfCollectionWriter(collection: String): Float {
  writer = CollectionWriter(SKStore.DirName::create(collection));
  writer.loading() match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_CollectionWriter__error")
fun errorOfCollectionWriter(collection: String, error: SKJSON.CJSON): Float {
  writer = CollectionWriter(SKStore.DirName::create(collection));
  writer.error(JSONError(error)) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

/************  Resource ****************/

@cpp_extern("SkipRuntime_Resource__instantiate")
@debug
native fun instantiateOfResource(
  resource: UInt32,
  collections: SKJSON.CJObject,
): String;

@cpp_extern("SkipRuntime_deleteResource")
@debug
native fun deleteResource(resource: UInt32): void;

@export("SkipRuntime_createResource")
fun createResource(resource: UInt32): ExternResource {
  ExternResource(SKStore.ExternalPointer::create(resource, deleteResource))
}

class ExternResource(eptr: SKStore.ExternalPointer) extends Resource {
  fun instantiate(
    collections: Map<String, Collection<SKStore.Key, SKStore.File>>,
  ): Collection<SKStore.Key, SKStore.File> {
    collectionName = instantiateOfResource(
      this.eptr.value,
      collectionsByName(collections),
    );
    collectionForName(collectionName)
  }
}

/************  ResourceBuilder ****************/

@cpp_extern("SkipRuntime_ResourceBuilder__build")
@debug
native fun buildOfResourceBuilder(
  builder: UInt32,
  params: SKJSON.CJSON,
): Resource;

@cpp_extern("SkipRuntime_deleteResourceBuilder")
@debug
native fun deleteResourceBuilder(resourceBuilder: UInt32): void;

@export("SkipRuntime_createResourceBuilder")
fun createResourceBuilder(resourceBuilder: UInt32): ResourceBuilder {
  ResourceBuilder(
    SKStore.ExternalPointer::create(resourceBuilder, deleteResourceBuilder),
  )
}

class JSONParams(json: SKJSON.CJSON) extends Parameters {
  fun toString(): String {
    this.json.prettyPrint()
  }
}

class JSONError(error: SKJSON.CJSON) extends IError {
  fun toString(): String {
    this.error.prettyPrint()
  }
}

class ResourceBuilder(eptr: SKStore.ExternalPointer) {
  fun build(params: JSONParams): Resource {
    buildOfResourceBuilder(this.eptr.value, params.json)
  }
}

/************  Checker ****************/

@cpp_extern("SkipRuntime_Checker__check")
@debug
native fun checkOfChecker(executor: UInt32, request: String): void;

@cpp_extern("SkipRuntime_deleteChecker")
@debug
native fun deleteChecker(mapper: UInt32): void;

@export("SkipRuntime_createChecker")
fun createChecker(executor: UInt32): ExternChecker {
  ExternChecker(SKStore.ExternalPointer::create(executor, deleteChecker))
}

@export("SkipRuntime_createIdentifier")
fun createIdentifier(request: String): Identifier {
  Identifier(request)
}

class ExternChecker(eptr: SKStore.ExternalPointer) extends Checker {
  fun check(request: String): void {
    checkOfChecker(this.eptr.value, request)
  }
}

/************  Service ****************/

@export("SkipRuntime_createService")
fun createService(
  service: UInt32,
  jsInputs: SKJSON.CJObject,
  resources: mutable Map<String, ResourceBuilder>,
  externalServices: mutable Map<String, ExternalService>,
): ExternService {
  inputs = mutable Vector[];
  jsInputs match {
  | SKJSON.CJObject(fields) ->
    for (fieldName => field in fields) {
      inputs.push(
        Input(
          fieldName,
          SKJSON.expectArray(field).map(v -> {
            e = SKJSON.expectArray(v);
            (JSONID(e[0]), SKJSON.expectArray(e[1]).map(v -> JSONFile(v)))
          }),
          kJSON_CONVERTERS,
        ),
      )
    }
  };
  ExternService(
    SKStore.ExternalPointer::create(service, deleteService),
    resources.chill(),
    JSONInputs(inputs.toArray()),
    externalServices.chill(),
  )
}

@cpp_extern("SkipRuntime_deleteService")
@debug
native fun deleteService(service: UInt32): void;

@cpp_extern("SkipRuntime_Service__createGraph")
@debug
native fun createGraphOfService(
  resource: UInt32,
  collections: SKJSON.CJObject,
): SKJSON.CJObject;

class JSONInputs(inputs: Array<Input<JSONID, JSONFile>>) extends Inputs {
  fun each(fn: Input<SKStore.Key, SKStore.File> -> void): void {
    this.inputs.each(i -> fn(i.unTyped()))
  }
}

class ExternService(
  eptr: SKStore.ExternalPointer,
  resources: Map<String, ResourceBuilder>,
) extends Service {
  //
  fun createGraph(
    inputs: Map<String, Collection<SKStore.Key, SKStore.File>>,
  ): Map<String, Collection<SKStore.Key, SKStore.File>> {
    names = createGraphOfService(this.eptr.value, collectionsByName(inputs));
    map = mutable Map[];
    names match {
    | SKJSON.CJObject(nfields) ->
      for (fieldName => field in nfields) {
        map![fieldName] = collectionForName(SKJSON.asString(field));
      }
    };
    map.chill()
  }

  fun buildResource(name: String, parameters: Parameters): Resource {
    this.resources.get(name).build(parameters as JSONParams _)
  }
}

/************  ResourceBuilderMap ****************/

@export("SkipRuntime_ResourceBuilderMap__create")
fun createOfResourceBuilderMap(): mutable Map<String, ResourceBuilder> {
  mutable Map[]
}

@export("SkipRuntime_ResourceBuilderMap__add")
fun addOfResourceBuilderMap(
  builders: mutable Map<String, ResourceBuilder>,
  name: String,
  builder: ResourceBuilder,
): void {
  builders.add(name, builder)
}

/************  ExternalServiceMap ****************/

@export("SkipRuntime_ExternalServiceMap__create")
fun createOfExternalServiceMap(): mutable Map<String, ExternalService> {
  mutable Map[]
}

@export("SkipRuntime_ExternalServiceMap__add")
fun addOfExternalServiceMap(
  suppliers: mutable Map<String, ExternalService>,
  name: String,
  supplier: ExternalService,
): void {
  suppliers.add(name, supplier)
}

/************  Collection ****************/

@export("SkipRuntime_Collection__getArray")
fun getArrayOfCollection(
  collection: String,
  key: SKJSON.CJSON,
): SKJSON.CJArray {
  SKJSON.CJArray(
    collectionForNameJSON(collection).getArray(JSONID(key)).map(v -> v.json),
  )
}
@export("SkipRuntime_Collection__getUnique")
fun getUniqueOfCollection(
  collection: String,
  key: SKJSON.CJSON,
): ?SKJSON.CJSON {
  collectionForNameJSON(collection).getUnique(JSONID(key)).map(v -> v.json)
}

@export("SkipRuntime_Collection__map")
fun mapOfCollection(collection: String, mapper: JSONMapper): String {
  collectionForNameJSON(collection).map(mapper).getId()
}

@export("SkipRuntime_Collection__mapReduce")
fun mapReduceOfCollection(
  collection: String,
  mapper: JSONMapper,
  reducer: JSONReducer,
): String {
  collectionForNameJSON(collection).mapReduce(mapper, reducer).getId()
}

@export("SkipRuntime_Collection__nativeMapReduce")
fun nativeMapReduce(
  collection: String,
  mapper: JSONMapper,
  reducer: String,
): String {
  collectionForNameJSON(collection)
    .nativeMapReduce(mapper, reducer, kCREATE_INTJSON)
    .getId()
}

@export("SkipRuntime_Collection__reduce")
fun reduceOfCollection(collection: String, reducer: JSONReducer): String {
  collectionForNameJSON(collection).reduce(reducer).getId()
}

@export("SkipRuntime_Collection__nativeReduce")
fun nativeReduceOfCollection(collection: String, reducer: String): String {
  collectionForNameJSON(collection)
    .nativeReduce(reducer, kCREATE_INTJSON)
    .getId()
}

@export("SkipRuntime_Collection__slices")
fun slicesOfCollection(collection: String, ranges: SKJSON.CJArray): String {
  collectionForName(collection)
    .slices(
      ranges match {
      | SKJSON.CJArray(values) ->
        values.map(v -> {
          e = SKJSON.expectArray(v);
          (JSONID(e[0]), JSONID(e[1]))
        })
      },
    )
    .getId()
}

@export("SkipRuntime_Collection__take")
fun takeOfCollection(collection: String, limit: Int): String {
  collectionForName(collection).take(limit).getId()
}

@export("SkipRuntime_Collection__merge")
fun mergeOfCollection(collection: String, others: SKJSON.CJArray): String {
  collectionForName(collection)
    .merge(
      others match {
      | SKJSON.CJArray(values) ->
        values.map(c -> collectionForName(SKJSON.asString(c)))
      },
    )
    .getId()
}

@export("SkipRuntime_Collection__size")
fun sizeOfCollection(collection: String): Int {
  collectionForName(collection).size()
}

/************  LazyCollection ****************/

@export("SkipRuntime_LazyCollection__getArray")
fun getArrayOfLazyCollection(lazy: String, key: SKJSON.CJSON): SKJSON.CJArray {
  SKJSON.CJArray(lazyForNameJSON(lazy).getArray(JSONID(key)).map(v -> v.json))
}
@export("SkipRuntime_LazyCollection__getUnique")
fun getUniqueOfLazyCollection(lazy: String, key: SKJSON.CJSON): SKJSON.CJSON {
  lazyForNameJSON(lazy).getUnique(JSONID(key)).json
}

/************  Notifier ****************/

@cpp_extern("SkipRuntime_Notifier__subscribed")
@debug
native fun subscribedOfNotifier(notifier: UInt32): void;

@cpp_extern("SkipRuntime_Notifier__notify")
@debug
native fun notifyOfNotifier(
  notifier: UInt32,
  values: SKJSON.CJArray,
  watermark: String,
  updates: Int32,
): void;

@cpp_extern("SkipRuntime_Notifier__close")
@debug
native fun closeOfNotifier(notifier: UInt32): void;

@cpp_extern("SkipRuntime_deleteNotifier")
@debug
native fun deleteNotifier(notifier: UInt32): void;

@export("SkipRuntime_createNotifier")
fun createNotifier(notifier: UInt32): ExternNotifier {
  ExternNotifier(SKStore.ExternalPointer::create(notifier, deleteNotifier))
}

class ExternNotifier(
  eptr: SKStore.ExternalPointer,
) extends Notifier<SKStore.Key, SKStore.File> {
  fun subscribed(): void {
    subscribedOfNotifier(this.eptr.value)
  }

  fun notify(
    values: Array<(SKStore.Key, Array<SKStore.File>)>,
    watermark: String,
    updates: Bool,
  ): void {
    notifyOfNotifier(
      this.eptr.value,
      SKJSON.CJArray(
        values.map(v ->
          SKJSON.CJArray(
            Array[jsonFromKey(v.i0), SKJSON.CJArray(v.i1.map(jsonFromFile))],
          )
        ),
      ),
      watermark,
      Int32::truncate(if (updates) 1 else 0),
    )
  }

  fun close(): void {
    closeOfNotifier(this.eptr.value)
  }
}

/************  Reducer ****************/

@cpp_extern("SkipRuntime_Reducer__add")
@debug
native fun addOfReducer(
  reducer: UInt32,
  acc: SKJSON.CJSON,
  value: SKJSON.CJSON,
): SKJSON.CJSON;

@cpp_extern("SkipRuntime_Reducer__remove")
@debug
native fun removeOfReducer(
  reducer: UInt32,
  acc: SKJSON.CJSON,
  value: SKJSON.CJSON,
): ?SKJSON.CJSON;

@cpp_extern("SkipRuntime_deleteReducer")
@debug
native fun deleteReducer(reducer: UInt32): void;

@export("SkipRuntime_createReducer")
fun createReducer(reducer: UInt32, initial: SKJSON.CJSON): JSONReducer {
  JSONReducer(
    SKStore.ExternalPointer::create(reducer, deleteReducer),
    JSONFile(initial),
  )
}

class JSONReducer(
  eptr: SKStore.ExternalPointer,
) extends Reducer<JSONFile, JSONFile> {
  fun add(acc: JSONFile, value: JSONFile): JSONFile {
    JSONFile(addOfReducer(this.eptr.value, acc.json, value.json))
  }

  fun remove(acc: JSONFile, value: JSONFile): ?JSONFile {
    removeOfReducer(this.eptr.value, acc.json, value.json).map(v -> JSONFile(v))
  }

  fun converter(): SKStore.File ~> JSONFile {
    JSONFile::type
  }
}

/************  Service Instance ****************/

@export("SkipRuntime_Runtime__createResource")
fun createResourceOfRuntime(
  identifier: String,
  resource: String,
  params: SKJSON.CJSON,
): Float {
  ServiceInstance.instantiateResource(
    identifier,
    resource,
    JSONParams(params),
  ) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_Runtime__getAll")
fun getAllOfRuntime(
  resourceName: String,
  params: SKJSON.CJSON,
  optRequest: ?Request,
): SKJSON.CJSON {
  ServiceInstance.getAll(resourceName, JSONParams(params), optRequest) match {
  | Success(result) ->
    fields = mutable Vector<(String, SKJSON.CJSON)>[
      (
        "payload",
        SKJSON.CJArray(
          result.values.values.map(v ->
            SKJSON.CJArray(
              Array[jsonFromKey(v.i0), SKJSON.CJArray(v.i1.map(jsonFromFile))],
            )
          ),
        ),
      ),
      ("errors", SKJSON.CJArray(result.errors.map(jsonFromError))),
    ];
    result.request.each(request ->
      fields.push(("request", SKJSON.CJString(request)))
    );
    SKJSON.CJObject(
      SKJSON.CJFields::create(fields.sortedBy(x ~> x.i0).toArray(), x -> x),
    )
  | Failure(err) -> SKJSON.CJFloat(getErrorHdl(err))
  }
}

@export("SkipRuntime_Runtime__getForKey")
fun getForKeyOfRuntime(
  resourceName: String,
  params: SKJSON.CJSON,
  key: SKJSON.CJSON,
  optRequest: ?Request,
): SKJSON.CJSON {
  ServiceInstance.getArray(
    resourceName,
    JSONParams(params),
    JSONID(key),
    optRequest,
  ) match {
  | Success(result) ->
    fields = mutable Vector<(String, SKJSON.CJSON)>[
      ("payload", SKJSON.CJArray(result.values.map(jsonFromFile))),
      ("errors", SKJSON.CJArray(result.errors.map(jsonFromError))),
    ];
    result.request.each(request ->
      fields.push(("request", SKJSON.CJString(request)))
    );
    SKJSON.CJObject(
      SKJSON.CJFields::create(fields.sortedBy(x ~> x.i0).toArray(), x -> x),
    )
  | Failure(err) -> SKJSON.CJFloat(getErrorHdl(err))
  };
}

@export("SkipRuntime_Runtime__closeResource")
fun closeResourceOfRuntime(identifier: String): Float {
  ServiceInstance.closeResource(identifier) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_Runtime__subscribe")
fun subscribeOfRuntime(
  reactiveId: String,
  notifier: ExternNotifier,
  watermark: ?String,
): Int {
  ServiceInstance.subscribe(reactiveId, notifier, watermark) match {
  | Success(id) -> id
  | Failure(err) -> -getErrorHdl(err).toInt()
  };
}

@export("SkipRuntime_Runtime__unsubscribe")
fun unsubscribeOfRuntime(session: Int): Float {
  ServiceInstance.unsubscribe(session) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_Runtime__update")
fun updateOfRuntime(input: String, values: SKJSON.CJArray): Float {
  ServiceInstance.update(
    input,
    values match {
    | SKJSON.CJArray(vs) ->
      vs.map(v -> {
        e = SKJSON.expectArray(v);
        (JSONID(e[0]), SKJSON.expectArray(e[1]).map(v ~> JSONFile(v)))
      })
    },
  ) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

/************ Context ****************/

@export("SkipRuntime_Context__createLazyCollection")
fun lazyOfContext(compute: LazyCompute<JSONID, JSONFile>): String {
  createLazyCollection(compute, kJSON_CONVERTERS).getId()
}

@export("SkipRuntime_Context__jsonExtract")
fun jsonExtractOfContext(
  from: SKJSON.CJObject,
  pattern: String,
): SKJSON.CJArray {
  SKJSON.CJArray(jsonExtract(from, pattern))
}

@export("SkipRuntime_Context__useExternalResource")
fun useExternalResource(
  service: String,
  identifier: String,
  params: SKJSON.CJSON,
): String {
  useExternalCollection(
    service,
    identifier,
    JSONParams(params),
    kJSON_CONVERTERS,
  ).getId()
}

/************ initService ****************/

@export("SkipRuntime_initService")
fun initSkipRuntimeService(service: Service): Float {
  initService(service) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

/************ closeService ****************/

@export("SkipRuntime_closeService")
fun closeSkipRuntimeService(): SKJSON.CJSON {
  ServiceInstance.close() match {
  | Success(handles) -> SKJSON.CJArray(handles.map(h -> SKJSON.CJFloat(h)))
  | Failure(err) -> SKJSON.CJFloat(getErrorHdl(err))
  };
}

class ExternalException(
  type: String,
  message: String,
  stack: String,
) extends .Exception {
  fun getMessage(): String {
    this.message
  }
}

@export("SkipRuntime_throwExternalException")
fun throwExternalException(type: String, message: String, stack: String): void {
  throw ExternalException(type, message, stack)
}

@export("SkipRuntime_getExceptionStack")
fun getExceptionStack(exn: .Exception): ?String {
  exn match {
  | ExternalException(_, _, stack) -> Some(stack)
  | _ -> None()
  }
}

@export("SkipRuntime_getExceptionType")
fun getExceptionType(exn: .Exception): String {
  exn match {
  | ExternalException(type, _, _) -> type
  | _ -> exn.getClassName()
  }
}

module end;
