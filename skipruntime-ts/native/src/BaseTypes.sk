module SkipRuntime;

base class IError uses Show

base class KeyConverter<K: frozen> {
  fun fromKey(SKStore.Key): K;
  fun toKey(K): SKStore.Key;
}

base class ValueConverter<V: frozen> {
  fun fromFile(SKStore.File): V;
  fun toFile(V): SKStore.File;
}

class ConverterPair<K: frozen, V: frozen>(
  key: KeyConverter<K>,
  value: ValueConverter<V>,
)

base class Reducer<V1: frozen, V2: frozen>(initial: V2) {
  fun add(acc: V2, value: V1): V2;
  fun remove(acc: V2, value: V1): ?V2;
  fun valueConverter(): SKStore.File ~> V1;
  fun accConverter(): ValueConverter<V2>;
}

/**
 * The type of a reactive function mapping over an arbitrary collection.
 * For each key & values in the input collection (of type K1/V1 respectively),
 * produces some key/value pairs for the output collection (of type K2/V2 respectively)
 * @param key - a key found in the input collection
 * @param values - the values mapped to by `key` in the input collection
 * @returns an iterable of key/value pairs to output for the given input(s)
 */
base class Mapper<K1: frozen, V1: frozen, K2: frozen, V2: frozen> {
  fun mapEntry(
    key: K1,
    values: mutable SKStore.NonEmptyIterator<V1>,
  ): mutable Iterator<(K2, V2)>;

  fun converters(): ConverterPair<K2, V2>;
}

base class LazyCompute<K: frozen, V: frozen> {
  fun compute(self: LazyCollection<K, V>, key: K): Array<V>;
}

base class ExternalService {
  fun subscribe(
    instance: String,
    collection: CollectionWriter,
    resource: String,
    params: Parameters,
  ): void;

  fun unsubscribe(instance: String): void;

  fun shutdown(): Float;
}

base class Parameters uses Orderable, Show

base class Resource {
  fun instantiate(
    collections: Map<String, Collection<SKStore.Key, SKStore.File>>,
  ): Collection<SKStore.Key, SKStore.File>;
}

base class Inputs {
  fun each(Input<SKStore.Key, SKStore.File> -> void): void;
}

base class Service(
  initialData: Inputs,
  externalServices: Map<String, ExternalService>,
) {
  fun buildResource(name: String, parameters: Parameters): Resource;

  fun createGraph(
    inputCollections: Map<String, Collection<SKStore.Key, SKStore.File>>,
  ): Map<String, Collection<SKStore.Key, SKStore.File>>;
}

base class Request {
  children =
  | Identifier(id: String)
}

base class Checker extends Request {
  fun check(request: String): void;
}

base class Notifier<K: frozen, V: frozen> {
  fun subscribed(): void;

  fun notify(
    values: Array<(K, Array<V>)>,
    watermark: String,
    updates: Bool,
  ): void;

  fun close(): void;
}

/** Prevent unused pattern */

class DummyChecker() extends Checker {
  fun check(_request: String): void {
    invariant_violation("dummy");
  }
}

module end;
