module SkipRuntime;

const kGarbageMillis: Int = 30000;

class IdentityMapper<K: frozen, V: frozen>(
  converters_: ConverterPair<K, V>,
) extends Mapper<K, V, K, V> {
  fun mapEntry(
    key: K,
    values: mutable SKStore.NonEmptyIterator<V>,
  ): mutable Iterator<(K, V)> {
    vec = mutable Vector[(key, values.first)];
    values.iter.each(v -> vec.push((key, v)));
    vec.iterator()
  }

  fun converters(): ConverterPair<K, V> {
    this.converters_
  }
}

class ReadInCreatorException() extends Exception {
  fun getMessage(): String {
    "A collection cannot be read in the function that creates it."
  }
}

class ExistingResourceException() extends Exception {
  fun getMessage(): String {
    "A resource instance with specified identifier already exists."
  }
}

class UseExternalResourceException() extends Exception {
  fun getMessage(): String {
    "useExternalResource is not allowed in a lazy computation graph."
  }
}

class SKStoreMapper<K1: frozen, V1: frozen, K2: frozen, V2: frozen>(
  mapper: Mapper<K1, V1, K2, V2>,
  converters: ConverterPair<K1, V1>,
) {
  fun map(
    ctx: mutable SKStore.Context,
    writer: mutable SKStore.TWriter<SKStore.Key, SKStore.File>,
    key: SKStore.Key,
    values: mutable SKStore.NonEmptyIterator<SKStore.File>,
  ): void {
    pushContext(ctx);
    try {
      mc = this.mapper.converters();
      for (entry in this.mapper.mapEntry(
        this.converters.key.fromKey(key),
        values.map(this.converters.value.fromFile),
      )) {
        writer.append(mc.key.toKey(entry.i0), mc.value.toFile(entry.i1))
      };
      popContext();
    } catch {
    | ex ->
      popContext();
      throw ex
    }
  }
}

class Params(params: Parameters) extends SKStore.File uses Orderable {
  fun compare(other: Params): Order {
    this.params.compare(other.params)
  }
  fun toString(): String {
    this.params.toString()
  }
}

class ResourceCollections(
  value: SKStore.EHandle<SKStore.SID, ResourceInfo>,
) extends SKStore.File

class ServiceDefinition(runId: String, service: Service) extends SKStore.File

class Handle(
  value: SKStore.EHandle<SKStore.Key, SKStore.File>,
) extends SKStore.File

class ResourceCollection(
  value: Map<String, Collection<SKStore.Key, SKStore.File>>,
) extends SKStore.File

class ResourceDef(
  name: String,
  params: Parameters,
) extends SKStore.File, SKStore.Key {
  //
  fun toString(): String {
    `${this.name}:${this.params}`
  }
}

class ResourceStatus(
  loadable: SKStore.DirName,
  status: Status<IError>,
) extends SKStore.File {}

class ServiceFile(
  value: Map<String, Collection<SKStore.Key, SKStore.File>>,
  inputs: Map<String, Collection<SKStore.Key, SKStore.File>>,
) extends SKStore.File

base class Status<E: IError>(created: Int, modified: Int) uses Show {
  children =
  | Loading()
  | Error(error: E)
  | Ok()

  static fun create<E: IError>(): Status<E> {
    time = Time.time_ms();
    Loading<E>(time, time)
  }

  fun ok(): Status<E> {
    Ok(this.created, Time.time_ms())
  }

  fun err(error: E): Status<E> {
    Error(error, this.created, Time.time_ms())
  }

  fun unTyped(): Status<IError>
  | Loading(created, modified) -> Loading<IError>(created, modified)
  | Error(e, created, modified) -> Error<IError>(e, created, modified)
  | Ok(created, modifie) -> Ok<IError>(created, modifie)

  fun toString(): String
  | Loading(created, modified) ->
    `Loading{created: ${created}, modified: ${modified}}`
  | Error(error, created, modified) ->
    `Error{error: ${error}, created: ${created}, modified: ${modified}}`
  | Ok(created, modified) -> `Ok{created: ${created}, modified: ${modified}}`
}

class StatusFile(status: Status<IError>) extends SKStore.File

class RequestFile(
  timestamp: Int,
  resource: ResourceInfo,
  checker: ?Checker,
) extends SKStore.File

class RequestStatuses(statuses: Array<ResourceStatus>) extends SKStore.File {
  //
  fun isLoading(): Bool {
    for (resourceStatus in this.statuses) {
      resourceStatus.status match {
      | Loading _ -> break true
      | Error _
      | Ok _ ->
        void
      }
    } else {
      false
    }
  }

  fun getErrors(): Array<IError> {
    errors = mutable Vector[];
    for (resourceStatus in this.statuses) {
      resourceStatus.status match {
      | Error(error, _, _) -> errors.push(error)
      | Loading _
      | Ok _ ->
        void
      }
    };
    errors.toArray()
  }
}

class RemoteSpecifiers(
  value: Map<String, ExternalService>,
) extends SKStore.File

class ResourceInfo(
  name: String,
  collection: Collection<SKStore.Key, SKStore.File>,
  statusRef: SKStore.DirName,
  session: String,
) extends SKStore.File {
  /**
   * Create a status request
   */
  fun createRequest(
    context: mutable SKStore.Context,
    requestId: String,
    optChecker: ?Checker,
  ): void {
    SKStore.EHandle(
      SKStore.SID::keyType,
      RequestFile::type,
      this.statusRef.sub("requests"),
    ).writeArray(
      context,
      SKStore.SID(requestId),
      Array[RequestFile(Time.time_ms(), this, optChecker)],
    );
    context.update();
  }

  fun clearRequest(context: mutable SKStore.Context, requestId: String): void {
    SKStore.EHandle(
      SKStore.SID::keyType,
      RequestFile::type,
      this.statusRef.sub("requests"),
    ).writeArray(context, SKStore.SID(requestId), Array[]);
  }
}

fun initCtx(): SKStore.Context {
  SKStore.Context{}
}

fun unTypedFile(x: SKStore.File): SKStore.File {
  x
}

fun buildResourcesGraph(
  context: mutable SKStore.Context,
  definitionHdl: SKStore.EHandle<SKStore.IID, ServiceDefinition>,
  statusHdl: SKStore.EHandle<SKStore.IID, ResourceStatus>,
  servicesHdl: SKStore.EHandle<SKStore.SID, ServiceFile>,
): void {
  dirname = kResourceSessionDir;
  dDirname = dirname.sub("data");
  resourcesHdl = context.mkdir(
    SKStore.SID::keyType,
    ResourceDef::type,
    dirname,
    Array[],
  );
  _ = context.mkdir(
    SKStore.SID::keyType,
    SKStore.IntFile::type,
    kResourceGarbageDir,
    Array[],
  );
  idbyresourceHdl = resourcesHdl.map(
    ResourceDef::keyType,
    SKStore.StringFile::type,
    context,
    dirname.sub("idbyresource"),
    (_c, writer, key, it) ~> {
      writer.set(it.first, SKStore.StringFile(key.value));
    },
  );
  availablesHdl = idbyresourceHdl.map(
    ResourceDef::keyType,
    SKStore.IntFile::type,
    context,
    dirname.sub("availables"),
    (_c, writer, key, _it) ~> {
      // map to ignore array changes
      // to prevent recompute on each add/remove session
      writer.set(key, SKStore.IntFile(1))
    },
  );
  _ = availablesHdl.map(
    ResourceDef::keyType,
    ResourceInfo::type,
    context,
    kResourceCollectionsDir,
    (context, writer, key, _it) ~> {
      (runId, service) = definitionHdl.maybeGet(context, SKStore.IID(0)) match {
      | Some(definition) -> (definition.runId, definition.service)
      | _ -> return void
      };
      pushContext(context);
      try {
        resourceId = toResourceId(key.name, key.params);
        statusRef = dirname.sub(resourceId);
        // Status graph
        sStatusHdl = context
          .mkdir(
            SKStore.DirName::keyType,
            StatusFile::type,
            statusRef.sub("status"),
            Array[],
            true,
          )
          .map(
            SKStore.IID::keyType,
            ResourceStatus::type,
            context,
            statusRef.sub("statuses"),
            (_ctx, writer, key, it) ~> {
              writer.set(SKStore.IID(0), ResourceStatus(key, it.first.status));
            },
          );
        _sRequestsHdl = context
          .mkdir(
            SKStore.SID::keyType,
            RequestFile::type,
            statusRef.sub("requests"),
            Array[],
            true,
          )
          .map(
            SKStore.SID::keyType,
            RequestStatuses::type,
            context,
            statusRef.sub("all"),
            (ctx, writer, key, it) ~> {
              rf = it.first;
              timestamp = rf.timestamp;
              statuses = statusHdl
                .getArray(ctx, SKStore.IID(0))
                .concat(sStatusHdl.getArray(ctx, SKStore.IID(0)))
                .filter(rs -> rs.status.created <= timestamp);
              requestStatuses = RequestStatuses(statuses);
              writer.set(key, requestStatuses);
              rf.checker match {
              | Some(checker) if (!requestStatuses.isLoading()) ->
                ctx.postpone(CheckRequest(statusRef, key, checker))
              | _ -> void
              }
            },
          );
        resource = service.resourceBuilders().get(key.name).produce(key.params);
        collections = servicesHdl.get(context, SKStore.SID(runId)).value;
        collection = resource.materialize(collections);
        // Ensure the name of the resource result
        resourceData = collection.hdl.map(
          kNOTYPE_KEY,
          kNOTYPE_VALUE,
          context,
          dDirname.sub(resourceId),
          (_ctx, writer, key, it) ~> {
            writer.setArray(key, Array::createFromIterator(it.values())); // TODO: use it.toArray()
          },
        );
        writer.set(
          key,
          ResourceInfo(
            resourceId,
            collection with {hdl => resourceData},
            statusRef,
            runId,
          ),
        );
        popContext()
      } catch {
      | ex ->
        popContext();
        throw ex
      }
    },
  );
}

fun initService(service: Service): Result<void, .Exception> {
  if (SKStore.gHasContext() == 0) {
    SKStore.gContextInit(initCtx());
  };
  runId = Ksuid::create().toString();
  SKStore.runWithResult(context ~> {
    if (context.unsafeMaybeGetEagerDir(kSessionDir) is None()) {
      sessionHdl = context.mkdir(
        SKStore.IID::keyType,
        ServiceDefinition::type,
        kSessionDir,
        Array[(SKStore.IID(0), ServiceDefinition(runId, service))],
      );
      servicesHdl = sessionHdl.map(
        SKStore.SID::keyType,
        ServiceFile::type,
        context,
        kGraphDir,
        (ctx, writer, _key, it) ~> {
          serviceDef = it.first;
          pushContext(ctx);
          mInputs = mutable Map[];
          serviceDef.service.initialData().each((name, initialData) -> {
            iDirName = SKStore.DirName::create(`/${name}/`);
            ctx.mkdirMulti(iDirName, initialData.keyValues());
            iHdl = SKStore.EHandle(kNOTYPE_KEY, kNOTYPE_VALUE, iDirName);
            mInputs.add(name, Collection(iHdl, kNOTYPE_CONVERTERS))
          });
          inputCollections = mInputs.chill();
          try {
            writer.set(
              SKStore.SID(serviceDef.runId),
              ServiceFile(
                serviceDef.service.createGraph(inputCollections),
                inputCollections,
              ),
            );
            popContext()
          } catch {
          | ex ->
            popContext();
            throw ex
          }
        },
      );
      // Service status
      statusHdl = context
        .mkdir(
          SKStore.DirName::keyType,
          StatusFile::type,
          kSessionDir.sub("status"),
          Array[],
        )
        .map(
          SKStore.IID::keyType,
          ResourceStatus::type,
          context,
          kSessionDir.sub("statuses"),
          (_ctx, writer, key, it) ~> {
            writer.set(SKStore.IID(0), ResourceStatus(key, it.first.status));
          },
        );
      buildResourcesGraph(context, sessionHdl, statusHdl, servicesHdl)
    } else {
      // Can be done because it's only used on test, we can add a environment variable or some way to protect that usage
      _ = closeService_(context);
      sessionHdl = SKStore.EHandle(
        SKStore.IID::keyType,
        ServiceDefinition::type,
        kSessionDir,
      );
      sessionHdl.writeArray(context, SKStore.IID(0), Array[]);
      context.update();
      sessionHdl.writeArray(
        context,
        SKStore.IID(0),
        Array[ServiceDefinition(runId, service)],
      );
    };
    updateContext(context);
  })
}

fun closeService_(context: mutable SKStore.Context): Array<Float> {
  resourceHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    ResourceDef::type,
    kResourceSessionDir,
  );
  todestroy = mutable Vector[];
  resourceHdl.items(context).each(kf -> {
    kf.i1.next().each(_f -> todestroy.push(SKStore.SID::keyType(kf.i0)))
  });
  todestroy.each(key -> destroyReactiveResource(context, key));
  sessionHdl = SKStore.EHandle(
    SKStore.IID::keyType,
    ServiceDefinition::type,
    kSessionDir,
  );
  handles = sessionHdl.maybeGet(context, SKStore.IID(0)) match {
  | Some(def) ->
    def.service
      .externalServices()
      .values()
      .map(es -> es.shutdown())
      .collect(Array)
  | _ -> Array[]
  };
  context.update();
  handles;
}

class CheckRequest(
  statusRef: SKStore.DirName,
  request: SKStore.SID,
  checker: Checker,
) extends SKStore.Postponable {
  //
  fun perform(context: mutable SKStore.Context): void {
    pushContext(context);
    this.checker.check(this.request.value);
    popContext();
    SKStore.EHandle(
      SKStore.SID::keyType,
      RequestFile::type,
      this.statusRef.sub("requests"),
    ).writeArray(context, this.request, Array[]);
  }
}

class LinkToResource(
  supplier: ExternalService,
  instance: String,
  writer: Writer,
  statusWriter: StatusWriter,
  name: String,
  params: Parameters,
) extends SKStore.Postponable {
  //
  fun perform(context: mutable SKStore.Context): void {
    this.statusWriter.status(context, Status::create());
    pushContext(context);
    this.supplier.subscribe(this.instance, this.writer, this.name, this.params);
    popContext();
  }
}

class CloseResource(
  supplier: ExternalService,
  instance: String,
) extends SKStore.Postponable {
  fun perform(context: mutable SKStore.Context): void {
    pushContext(context);
    this.supplier.unsubscribe(this.instance);
    popContext();
  }
}

/**
 * Creates a lazy reactive collection.
 * @param compute - the function to compute entries of the lazy collection
 * @param params - any additional parameters to the computation
 * @returns The resulting lazy collection
 */
fun createLazyCollection<K: frozen, V: frozen>(
  compute: LazyCompute<K, V>,
  converters: ConverterPair<K, V>,
): LazyCollection<K, V> {
  getContext() match {
  | Some(context) ->
    collectionId = `collection_${SKStore.genSym(0)}`;
    dirName = subDirName(context, collectionId);
    lhdl = SKStore.LHandle::create(
      kNOTYPE_KEY,
      kNOTYPE_VALUE,
      context,
      dirName,
      (ctx, self, key) ~> {
        pushContext(ctx);
        try {
          res = compute.compute(
            LazyCollection(self, converters),
            converters.key.fromKey(key),
          );
          popContext();
          res.map(converters.value.toFile)
        } catch {
        | ex ->
          popContext();
          throw ex
        }
      },
    );
    LazyCollection(lhdl, converters)

  | _ -> invariant_violation("Store context must be specified.")
  }
}

fun jsonExtract(from: SKJSON.CJObject, pattern: String): Array<SKJSON.CJSON> {
  fieldsList = SKJSON.PatternParser::mcreate(pattern)
    .toplevelPattern()
    .pmatch(from)
    .collect(Array);
  values = mutable Vector[];
  fieldsList.each(fields -> {
    array = fields.collect(Array).map(field -> {
      cjfields = SKJSON.CJFields::create(Array[field], x -> x);
      SKJSON.CJObject(cjfields)
    });
    values.push(SKJSON.CJArray(array));
  });
  values.toArray()
}

fun useExternalCollection<K: frozen, V: frozen>(
  supplier: String,
  resource: String,
  params: Parameters,
  converters: ConverterPair<K, V>,
): Collection<K, V> {
  getContext() match {
  | Some(context) ->
    context.currentArrow().each(a -> {
      context.unsafeMaybeGetDir(a.childName) match {
      | Some(SKStore.LazyDir _) -> throw UseExternalResourceException()
      | _ -> void
      }
    });
    sessionHdl = SKStore.EHandle(
      SKStore.IID::keyType,
      ServiceDefinition::type,
      kSessionDir,
    );
    service = sessionHdl.get(context, SKStore.IID(0)).service;
    externalSupplier = service.externalServices().get(supplier);
    collectionId = toSuppliedResourceId(supplier, resource, params);
    dirName = subDirName(context, collectionId);
    paramsDir = dirName.sub("params");
    dataDir = dirName.sub("data");
    hdl = context.mkdir(
      SKStore.IID::keyType,
      Params::type,
      paramsDir,
      Array[(SKStore.IID(0), Params(params))],
    );
    collectionHdl = hdl.map(
      SKStore.IID::keyType,
      Handle::type,
      context,
      dirName,
      (context, writer, key, it) ~> {
        instance = Ksuid::create().toString();
        storeDir = dirName.sub(base64(it.first.toString()));
        cwriter = CollectionWriter(storeDir);
        store = context.mkdir(
          kNOTYPE_KEY,
          kNOTYPE_VALUE,
          storeDir,
          Array[],
          true,
          Some(
            LinkToResource(
              externalSupplier,
              instance,
              cwriter,
              cwriter,
              resource,
              it.first.params,
            ),
          ),
          Some(CloseResource(externalSupplier, instance)),
        );
        writer.set(key, Handle(store));
      },
    );
    Collection(
      hdl.map(
        kNOTYPE_KEY,
        kNOTYPE_VALUE,
        context,
        dataDir,
        (context, writer, key, _it) ~> {
          remote = collectionHdl.get(context, key).value;
          remote.items(context).each(kv -> {
            writer.setArray(kv.i0, kv.i1.collect(Array))
          });
        },
      ),
      converters,
    )
  | _ -> invariant_violation("Store context must be specified.")
  }
}

class Collection<K: frozen, V: frozen>(
  hdl: SKStore.EHandle<SKStore.Key, SKStore.File>,
  converters: ConverterPair<K, V>,
) {
  //
  static fun forName<K: frozen, V: frozen>(
    name: String,
    converters: ConverterPair<K, V>,
  ): Collection<K, V> {
    hdl = SKStore.EHandle<SKStore.Key, SKStore.File>(
      kNOTYPE_KEY,
      kNOTYPE_VALUE,
      SKStore.DirName::create(name),
    );
    Collection(hdl, converters)
  }

  fun getId(): String {
    this.hdl.getDirName().toString();
  }

  /**
   * Get (and potentially compute) all values mapped to by some key of a lazy reactive
   * collection.
   */
  fun getArray(key: K): Array<V> {
    getContext() match {
    | Some(context) ->
      dir = context.unsafeGetEagerDir(this.hdl.dirName);
      if (dir.creator == context.currentArrow()) {
        throw ReadInCreatorException()
      };
      dir
        .getArray(context, this.converters.key.toKey(key))
        .map(this.converters.value.fromFile)
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  /**
   * Get a value of an eager reactive collection, if one exists.
   * If multiple values are mapped to by the key, any of them can be returned.
   * @returns the value for this `key`, or null if no such value exists
   */
  fun getUnique(key: K): ?V {
    value = this.getArray(key);
    if (value.size() == 1) Some(value[0]) else None();
  }

  /**
   * Create a new eager collection by mapping some computation over this one
   * @param mapper - function to apply to each element of this collection
   * @returns The resulting (eager) output collection
   */
  fun map<K2: frozen, V2: frozen>(
    mapper: Mapper<K, V, K2, V2>,
  ): Collection<K2, V2> {
    this.map_(mapper, None())
  }

  /**
   * Create a new eager reactive collection by mapping some computation `mapper` over this
   * one and then reducing the results with `reducer`
   * @param mapper - function to apply to each element of this collection
   * @param reducer - function to combine results of the `mapper`
   * @returns An eager collection containing the output of the reducer
   */
  fun mapReduce<K2: frozen, V2: frozen, V3: frozen>(
    mapper: Mapper<K, V, K2, V2>,
    reducer: Reducer<V2, V3>,
  ): Collection<K2, V3> {
    getContext() match {
    | Some(context) ->
      collectionId = `collection_${SKStore.genSym(0)}`;
      dirName = this.hdl.dirName.sub(collectionId);
      converters = mapper.converters();
      hdl = this.hdl.mapReduce(
        kNOTYPE_KEY,
        kNOTYPE_VALUE,
        context,
        dirName,
        SKStoreMapper(mapper, this.converters).map,
        accReducer(reducer),
      );
      Collection(hdl, ConverterPair(converters.key, reducer.accConverter()))
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  fun reduce<V2: frozen>(reducer: Reducer<V, V2>): Collection<K, V2> {
    this.mapReduce(IdentityMapper(this.converters), reducer)
  }

  fun unsafeCast<K2: frozen, V2: frozen>(
    converters: ConverterPair<K2, V2>,
  ): Collection<K2, V2> {
    hdl = SKStore.EHandle(kNOTYPE_KEY, kNOTYPE_VALUE, this.hdl.dirName);
    Collection(hdl, converters)
  }

  fun unTyped(): Collection<SKStore.Key, SKStore.File> {
    this.unsafeCast(kNOTYPE_CONVERTERS)
  }

  fun nativeMapReduce<K2: frozen, V2: frozen>(
    mapper: Mapper<K, V, K2, V2>,
    reducer: String,
    value: V2 ~> Int,
    create: Int ~> V2,
  ): Collection<K2, V2> {
    converters = mapper.converters();
    this.nativeMapReduceImpl(
      mapper,
      this.eReducer(
        reducer,
        v ~> value(converters.value.fromFile(v)),
        v ~> converters.value.toFile(create(v)),
      ),
    )
  }

  fun nativeReduce(
    reducer: String,
    value: V ~> Int,
    create: Int ~> V,
  ): Collection<K, V> {
    this.nativeMapReduce(
      IdentityMapper(this.converters),
      reducer,
      value,
      create,
    )
  }

  /**
   * Create a new eager collection by keeping only the elements whose keys are in
   * the given ranges.
   */
  fun slices(ranges: Array<(K, K)>): Collection<K, V> {
    this.map_(IdentityMapper(this.converters), Some(ranges))
  }

  /**
   * Create a new eager collection by keeping the given number of the first elements.
   */
  fun take(limit: Int): Collection<K, V> {
    getContext() match {
    | Some(context) ->
      collectionId = `collection_${SKStore.genSym(0)}`;
      dirName = this.hdl.dirName.sub(collectionId);
      resHdl = this.hdl.filter(
        context,
        dirName,
        limit,
        noFilter,
        countElementAsOne,
        removeElementAsOne,
        None(),
      );
      Collection(resHdl, this.converters)
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  /**
   * Combine some eager collections into one, associating with each key _all_ values
   * associated with that key in any of the input collections.
   * @param others - some other eager collections of compatible type
   * @returns The resulting combination of all input key/value pairs
   */
  fun merge(others: Array<Collection<K, V>>): Collection<K, V> {
    getContext() match {
    | Some(context) ->
      collectionId = `collection_${SKStore.genSym(0)}`;
      dirName = this.hdl.dirName.sub(collectionId);
      hdl = SKStore.EHandle::multiMap(
        kNOTYPE_KEY,
        kNOTYPE_VALUE,
        context,
        Array[this].concat(others).map(c ->
          c match {
          | ci @ Collection _ -> (ci.hdl, (identityMap, None()))
          }
        ),
        dirName,
      );
      Collection(hdl, this.converters)
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  /**
   * Get the current number of elements in the collection
   * @returns The current number of elements in the collection
   */
  fun size(): Int {
    getContext() match {
    | Some(context) ->
      dir = context.unsafeGetEagerDir(this.hdl.dirName);
      if (dir.creator == context.currentArrow()) {
        throw ReadInCreatorException()
      };
      dir.size(context)
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  fun getAll(context: mutable SKStore.Context): Array<(K, Array<V>)> {
    values = mutable Vector<(K, Array<V>)>[];
    dir = context.unsafeGetEagerDir(this.hdl.getDirName());
    for (kv in dir.unsafeGetFileIter()) {
      (key, files) = kv;
      values.push(
        (
          this.converters.key.fromKey(key),
          files.collect(Array).map(this.converters.value.fromFile),
        ),
      );
    };
    values.toArray();
  }

  fun items(
    context: mutable SKStore.Context,
  ): mutable Iterator<(K, mutable Iterator<V>)> {
    this.hdl.items(context).map(v ->
      (
        this.converters.key.fromKey(v.i0),
        v.i1.map(this.converters.value.fromFile),
      )
    )
  }

  fun subscribe(
    context: mutable SKStore.Context,
    identifier: String,
    session: Int,
    from: SKStore.Tick,
    notify: (Array<(K, Array<V>)>, SKStore.Tick, Bool) ~> void,
    close: () ~> void,
  ): void {
    context.subscribe(
      session,
      SKStore.NWatch(
        identifier,
        from,
        (_dirName, values, tick, update) ~> {
          notify(values.map(this.converters.fromSKStore), tick, update)
        },
        close,
        true,
      ),
      None(),
      Array[
        SKStore.DirSub(
          this.hdl.getDirName(),
          "",
          SKStore.OJSON(Array[]),
          (__) ~> None(),
        ),
      ],
      Some(from),
    )
  }

  private fun map_<K2: frozen, V2: frozen>(
    mapper: Mapper<K, V, K2, V2>,
    rangeOpt: ?Array<(K2, K2)> = None(),
  ): Collection<K2, V2> {
    getContext() match {
    | Some(context) ->
      collectionId = `collection_${SKStore.genSym(0)}`;
      dirName = this.hdl.dirName.sub(collectionId);
      converters = mapper.converters();
      hdl = this.hdl.map(
        kNOTYPE_KEY,
        kNOTYPE_VALUE,
        context,
        dirName,
        SKStoreMapper(mapper, this.converters).map,
        rangeOpt.map(v ->
          v.map(r ->
            SKStore.KeyRange(
              converters.key.toKey(r.i0),
              converters.key.toKey(r.i1),
            )
          )
        ),
      );
      Collection(hdl, converters)
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  private fun nativeMapReduceImpl<K2: frozen, V2: frozen>(
    mapper: Mapper<K, V, K2, V2>,
    reducer: SKStore.EReducer<SKStore.File, SKStore.File>,
  ): Collection<K2, V2> {
    getContext() match {
    | Some(context) ->
      collectionId = `collection_${SKStore.genSym(0)}`;
      dirName = this.hdl.dirName.sub(collectionId);
      converters = mapper.converters();
      hdl = this.hdl.mapReduce(
        kNOTYPE_KEY,
        kNOTYPE_VALUE,
        context,
        dirName,
        SKStoreMapper(mapper, this.converters).map,
        reducer,
      );
      Collection(hdl, converters)
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  private fun eReducer(
    reducer: String,
    value: SKStore.File ~> Int,
    create: Int ~> SKStore.File,
  ): SKStore.EReducer<SKStore.File, SKStore.File> {
    reducer match {
    | "sum" -> SKStore.sumReducer_(value, create, kNOTYPE_VALUE)
    | "min" -> SKStore.minReducer_(value, create, kNOTYPE_VALUE)
    | "max" -> SKStore.maxReducer_(value, create, kNOTYPE_VALUE)
    | "count" -> SKStore.countReducer_(value, create, kNOTYPE_VALUE)
    | _ -> throw SKStore.Error("Unrecognized native reducer: " + reducer)
    };
  }
}

class LazyCollection<K: frozen, V: frozen>(
  private hdl: SKStore.LHandle<SKStore.Key, SKStore.File>,
  converters: ConverterPair<K, V>,
) {
  //
  static fun forName<K: frozen, V: frozen>(
    name: String,
    converters: ConverterPair<K, V>,
  ): LazyCollection<K, V> {
    hdl = SKStore.LHandle(
      kNOTYPE_KEY,
      kNOTYPE_VALUE,
      SKStore.DirName::create(name),
    );
    LazyCollection(hdl, converters)
  }

  fun getId(): String {
    this.hdl.getDirName().toString();
  }

  /**
   * Get (and potentially compute) all values mapped to by some key of a lazy reactive
   * collection.
   */
  fun getArray(key: K): Array<V> {
    getContext() match {
    | Some(context) ->
      this.hdl.getArray(context, this.converters.key.toKey(key)).map(
        this.converters.value.fromFile,
      )
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  /**
   * Get (and potentially compute) a value of a lazy reactive collection.
   * @throws {Error} when either zero or multiple such values exist
   */
  fun getUnique(key: K): V {
    getContext() match {
    | Some(context) ->
      this.converters.value.fromFile(
        this.hdl.get(context, this.converters.key.toKey(key)),
      )
    | _ -> invariant_violation("Store context must be specified.")
    }
  }
}

class CollectionWriter(dirName: SKStore.DirName) extends Writer, StatusWriter {
  //
  fun getId(): String {
    this.dirName.toString()
  }

  fun update(
    values: Array<(SKStore.Key, Array<SKStore.File>)>,
    isInit: Bool,
  ): Result<void, .Exception> {
    getContext() match {
    | Some(context) ->
      try {
        this.update_(context, values, isInit);
        this.updateStatus(context, status ~> status.ok());
        Success(void)
      } catch {
      | ex -> Failure(ex)
      }
    | _ ->
      SKStore.runWithResult(context ~> {
        this.update_(context, values, isInit);
        this.updateStatus(context, status ~> status.ok());
        updateContext(context);
      })
    }
  }

  fun error(error: IError): Result<void, .Exception> {
    getContext() match {
    | Some(context) ->
      try {
        this.updateStatus(context, status ~> status.err(error));
        Success(void)
      } catch {
      | ex -> Failure(ex)
      }
    | _ ->
      SKStore.runWithResult(context ~> {
        this.updateStatus(context, status ~> status.err(error));
        updateContext(context);
      })
    }
  }

  fun loading(): Result<void, .Exception> {
    getContext() match {
    | Some(context) ->
      try {
        this.status(context, Status::create());
        Success(void)
      } catch {
      | ex -> Failure(ex)
      }
    | _ ->
      SKStore.runWithResult(context ~> {
        this.status(context, Status::create());
        updateContext(context);
      })
    }
  }

  fun status(context: mutable SKStore.Context, status: Status<IError>): void {
    context.maybeGetEagerDir(this.dirName) match {
    | Some(dir) ->
      dirname = this.sessionId(context, dir) match {
      | Some(sessionId) -> kResourceSessionDir.sub(sessionId).sub("status")
      | _ -> kSessionDir.sub("status")
      };
      shdl = SKStore.EHandle(
        SKStore.DirName::keyType,
        StatusFile::type,
        dirname,
      );
      shdl.writeArray(
        context,
        this.dirName,
        Array[StatusFile(status.unTyped())],
      )
    | _ -> void
    };
  }

  fun updateStatus(
    context: mutable SKStore.Context,
    update: Status<IError> ~> Status<IError>,
  ): void {
    context.maybeGetEagerDir(this.dirName) match {
    | Some(dir) ->
      dirname = this.sessionId(context, dir) match {
      | Some(sessionId) -> kResourceSessionDir.sub(sessionId).sub("status")
      | _ -> kSessionDir.sub("status")
      };
      shdl = SKStore.EHandle(
        SKStore.DirName::keyType,
        StatusFile::type,
        dirname,
      );
      status = update(shdl.get(context, this.dirName).status);
      shdl.writeArray(
        context,
        this.dirName,
        Array[StatusFile(status.unTyped())],
      )
    | _ -> void
    };
  }

  private fun update_(
    context: mutable SKStore.Context,
    values: Array<(SKStore.Key, Array<SKStore.File>)>,
    isInit: Bool,
  ): void {
    dir = context.maybeGetEagerDir(this.dirName) match {
    | Some(dir) -> dir
    | _ -> return void
    };
    keys = if (isInit) {
      dir.keys()
    } else {
      SortedSet<SKStore.Key>[]
    };
    chdl = SKStore.EHandle(kNOTYPE_KEY, kNOTYPE_VALUE, this.dirName);
    values.each(e -> {
      chdl.writeArray(context, e.i0, e.i1);
      !keys = keys.remove(e.i0);
    });
    keys.each(key -> chdl.writeArray(context, key, Array[]));
  }

  private fun sessionId(
    context: mutable SKStore.Context,
    dir: SKStore.EagerDir,
  ): ?String {
    dir.creator match {
    | Some(arrow) ->
      if (this.isResourceDir(arrow.parentName)) {
        Some(base64(SKStore.SID::keyType(arrow.key).value))
      } else {
        context.maybeGetEagerDir(arrow.parentName) match {
        | Some(sdir) -> this.sessionId(context, sdir)
        | _ -> None()
        }
      }
    | _ -> None()
    }
  }

  private fun isResourceDir(dirName: SKStore.DirName): Bool {
    dirName == kResourceSessionDir
  }
}

fun destroyReactiveResource(
  context: mutable SKStore.Context,
  sid: SKStore.SID,
): void {
  context
    .getPersistent(`subscription.${sid}`)
    .map(SKStore.IntFile::type) match {
  | Some(subId) ->
    session = subId.value;
    context.sessions.maybeGet(session).each(sub -> {
      close = sub.cmd match {
      | SKStore.NWatch(_, _, _, close, _) -> close
      | _ -> invariant_violation("Not manage session kind")
      };
      context.removePersistent(`subscription.${sid}`);
      close();
      context.unsubscribe(session);
    })
  | _ -> void
  };
  resourceHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    ResourceDef::type,
    kResourceSessionDir,
  );
  resourceHdl.writeArray(context, sid, Array[]);
}

fun closeReactiveResource(
  context: mutable SKStore.Context,
  identifier: String,
  update: Bool = true,
): void {
  context
    .getPersistent(`subscription.${identifier}`)
    .map(SKStore.IntFile::type) match {
  | Some(subId) -> unsubscribe(context, subId.value, update)
  | _ ->
    garbageHdl = SKStore.EHandle(
      SKStore.SID::keyType,
      SKStore.IntFile::type,
      kResourceGarbageDir,
    );
    sid = SKStore.SID(identifier);
    if (garbageHdl.maybeGet(context, sid).isSome()) return void;
    time = Time.time_ms();
    garbageHdl.writeArray(context, sid, Array[SKStore.IntFile(time)]);
    if (update) updateContext(context)
  };
}

fun subscribe(
  context: mutable SKStore.Context,
  identifier: String,
  notifier: Notifier<SKStore.Key, SKStore.File>,
  optWatermark: ?String,
): Int {
  garbageHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    SKStore.IntFile::type,
    kResourceGarbageDir,
  );
  sid = SKStore.SID(identifier);
  session = SKStore.genSym(0);
  resourceHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    ResourceDef::type,
    kResourceSessionDir,
  );
  resourcesCollectionsHdl = SKStore.EHandle(
    ResourceDef::keyType,
    ResourceInfo::type,
    kResourceCollectionsDir,
  );
  subId = `subscription.${identifier}`;
  if (context.getPersistent(subId).isSome()) {
    return -2
  };
  resourceHdl.maybeGet(context, sid) match {
  | Some(definition) ->
    info = resourcesCollectionsHdl.get(context, definition);
    start = `${info.session}/`;
    from = optWatermark match {
    | Some(watermark) if (watermark.startsWith(start)) ->
      watermark.stripPrefix(start).toInt()
    | _ -> 0
    };
    notifier.subscribed();
    info.collection.subscribe(
      context,
      identifier,
      session,
      SKStore.Tick(from),
      (values, tick, update) ~> {
        notifier.notify(values, `${info.session}/${tick}`, update)
      },
      notifier.close,
    );
    context.setPersistent(subId, SKStore.IntFile(session));
    if (garbageHdl.maybeGet(context, sid).isSome()) {
      garbageHdl.writeArray(context, sid, Array[]);
      context.update();
    };
    checkGarbage(context);
    session
  | _ -> -1
  }
}

fun unsubscribe(
  context: mutable SKStore.Context,
  session: Int,
  update: Bool = true,
): void {
  context.sessions.maybeGet(session).each(sub -> {
    (identifier, close) = sub.cmd match {
    | SKStore.NWatch(identifier, _, _, close, _) -> (identifier, close)
    | _ -> invariant_violation("Not manage session kind")
    };
    context.removePersistent(`subscription.${identifier}`);
    close();
    context.unsubscribe(session);
    closeReactiveResource(context, identifier, update);
  });
}

// WRITES

fun update(
  context: mutable SKStore.Context,
  collection: String,
  values: Array<(SKStore.Key, Array<SKStore.File>)>,
): void {
  chdl = SKStore.EHandle(
    kNOTYPE_KEY,
    kNOTYPE_VALUE,
    SKStore.DirName::create(`/${collection}/`),
  );
  values.each(keyValue -> chdl.writeArray(context, keyValue.i0, keyValue.i1));
  updateContext(context);
}

fun delete(
  context: mutable SKStore.Context,
  collection: String,
  key: SKJSON.CJSON,
): void {
  chdl = SKStore.EHandle(
    JSONID::keyType,
    JSONFile::type,
    SKStore.DirName::create(`/${collection}/`),
  );
  chdl.writeArray(context, JSONID(key), Array[]);
  updateContext(context);
}

fun createReactiveResource(
  context: mutable SKStore.Context,
  identifier: String,
  resource: String,
  params: Parameters,
): ResourceInfo {
  resourceHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    ResourceDef::type,
    kResourceSessionDir,
  );
  key = SKStore.SID(identifier);
  resourceHdl.maybeGet(context, key) match {
  | Some _ -> throw ExistingResourceException()
  | _ -> void
  };
  definition = ResourceDef(resource, params);
  resourceHdl.writeArray(context, key, Array[definition]);
  context.update();
  graphHdl = SKStore.EHandle(
    ResourceDef::keyType,
    ResourceInfo::type,
    kResourceCollectionsDir,
  );
  graphHdl.get(context, definition);
}

fun getReactiveResource(
  context: mutable SKStore.Context,
  identifier: String,
): ResourceInfo {
  resourceHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    ResourceDef::type,
    kResourceSessionDir,
  );
  graphHdl = SKStore.EHandle(
    ResourceDef::keyType,
    ResourceInfo::type,
    kResourceCollectionsDir,
  );
  key = SKStore.SID(identifier);
  definition = resourceHdl.get(context, key);
  graphHdl.get(context, definition);
}

fun checkGarbage(context: mutable SKStore.Context): void {
  garbageHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    SKStore.IntFile::type,
    kResourceGarbageDir,
  );
  resourceHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    ResourceDef::type,
    kResourceSessionDir,
  );
  time = Time.time_ms();
  destroyed = mutable Vector[];
  garbageHdl.items(context).each(kf -> {
    kf.i1.next().each(f -> {
      suppressed = SKStore.IntFile::type(f).value;
      if (time - suppressed > kGarbageMillis) {
        key = SKStore.SID::keyType(kf.i0);
        destroyed.push(key);
        resourceHdl.writeArray(context, key, Array[]);
      }
    })
  });
  destroyed.each(key -> garbageHdl.writeArray(context, key, Array[]));
  if (!destroyed.isEmpty()) context.update();
}

fun updateContext(context: mutable SKStore.Context): void {
  context.update();
  checkGarbage(context);
}

class TWriter<K: frozen, V: frozen, E: frozen>(
  writer: Writer,
  toSKStore: ((K, Array<V>)) ~> (SKStore.Key, Array<SKStore.File>),
  toError: E ~> IError,
) {
  fun update(
    values: Array<(K, Array<V>)>,
    isInit: Bool,
  ): Result<void, .Exception> {
    this.writer.update(values.map(this.toSKStore), isInit)
  }

  fun error(error: E): Result<void, .Exception> {
    this.writer.error(this.toError(error))
  }

  fun loading(): Result<void, .Exception> {
    this.writer.loading()
  }
}

module end;
