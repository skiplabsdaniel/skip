module alias SK = SKStore;

module Skmake;

fun main(): void {
  suppliers = Array[
    Skargo.clean,
    Skargo.format,
    Skargo.init,
    Skargo.help,
    check,
  ];
  Skargo.perform("skmake", suppliers, cmd ~>
    cmd.arg(Cli.Arg::string("data")).arg(Cli.Arg::string("init"))
  );
}

fun checkAndRunContext<T>(
  fn: mutable SK.Context ~> Result<T, .Exception>,
): Result<T, .Exception> {
  if (SK.gHasContext() == 0) {
    SK.gContextInit(initCtx(SK.DirName::create("/skmake/")));
  };
  SK.runWithResult(
    fn,
    //Some(SK.Synchronizer(SK.import, SK.export, _ ~> void)),
  ) match {
  | Success(res) -> res
  | Failure(e) -> Failure(e)
  }
}

fun withTimer<T>(
  f: () -> Result<T, .Exception>,
  g: (Float, Bool) -> void,
): Result<T, .Exception> {
  t0 = Time.time_ms();
  res = f();
  t1 = Time.time_ms();
  g((t1 - t0).toFloat() / 1000.0, res.isFailure());
  res
}

module end;
